const fs = require("fs-extra");

module.exports.config = {
    name: 'menu',
    version: '1.4.4',
    hasPermssion: 0,
    credits: 'Ho√†ng L·ªôc',
    description: 'Xem danh s√°ch nh√≥m l·ªánh, th√¥ng tin chi ti·∫øt l·ªánh',
    commandCategory: 'Danh s√°ch l·ªánh',
    usages: '[...name commands|all|per <permission level>]',
    cooldowns: 5,
    envConfig: {
        autoUnsend: {
            status: true,
            timeOut: 500 // gi√¢y
        }
    }
};

const { autoUnsend } =
    (global.config && global.config.menu) || module.exports.config.envConfig;

module.exports.run = async function ({ api, event, args }) {
    const { sendMessage: send, unsendMessage: unsend } = api;
    const { threadID: tid, senderID: sid } = event;
    const isAdmin = global.config.ADMINBOT.includes(sid);

    // ===== menu all =====
    if (args[0] === "all") {
        const data = commandsGroup(isAdmin);
        let txt = `‚ú® „Äö DANH S√ÅCH TO√ÄN B·ªò L·ªÜNH „Äõ ‚ú®\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
        let count = 0;

        for (const group of data) {
            txt += `üå∫ ${group.commandCategory.toUpperCase()}:\n`;
            txt += group.commandsName
                .map(cmd => `   ${++count}. ${cmd.charAt(0).toUpperCase() + cmd.slice(1)} ‚úÖ`)
                .join("\n");
            txt += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
        }

        txt += `üéÄ T·ªïng c·ªông: ${count} l·ªánh`;

        return send(txt, tid);
    }

    // ===== menu ch√≠nh =====
    if (args.length === 0) {
        const data = commandsGroup(isAdmin);
        const totalCmds = data.reduce((acc, cur) => acc + cur.commandsName.length, 0);
        let txt = `üíñüå∏ „Äö MENU BOT „Äõ‚îÅ‚îÅ‚îÅ‚îÅ„Äö ùìöùì±ùìæùì∂ùì´ùì≤ùìΩùì¨ùì∏ùì≠ùìÆ - ùìóùìõüå∏„Äõüå∏üíñ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`,
            count = 0;

        for (const { commandCategory, commandsName } of data) {
            txt += `üå∏ ${++count}. ${commandCategory.charAt(0).toUpperCase() + commandCategory.slice(1)}  |  ‚ú® C√≥ ${commandsName.length} l·ªánh üíñ\n`;
        }

        txt += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
        txt += `üéÄ T·ªïng c·ªông: ${totalCmds} l·ªánh\n`;
        txt += `üåü Reply s·ªë (1 ‚Üí ${data.length}) ƒë·ªÉ xem chi ti·∫øt nh√≥m\n`;
        txt += `‚è≥ T·ª± g·ª° sau: ${autoUnsend.timeOut}s\n`;
        txt += `üôà M·ªôt s·ªë l·ªánh 18+ ƒë√£ b·ªã kho√°\n`;
        txt += `üíå FB ADMIN: https://facebook.com/???`;

        send({
            body: txt,
            attachment: fs.createReadStream(__dirname + "/anime.gif")
        }, tid, (err, info) => {
            if (autoUnsend.status)
                setTimeout(() => unsend(info.messageID), autoUnsend.timeOut * 1000);
            // push handleReply c·∫•p 1
            global.client.handleReply.push({
                type: "menu",
                name: "menu",
                author: sid,
                messageID: info.messageID,
                data: data
            });
        });
    }
};

// ================== handle reply ===================
module.exports.handleReply = async function ({ api, event, handleReply }) {
    const { threadID, senderID, body } = event;
    if (senderID !== handleReply.author) return;

    const num = parseInt(body);
    if (isNaN(num)) return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!", threadID);

    // menu ch√≠nh: ch·ªçn nh√≥m
    if (handleReply.type === "menu") {
        if (num < 1 || num > handleReply.data.length)
            return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", threadID);

        const group = handleReply.data[num - 1];
        let txt = `üå∏ „Äö ${group.commandCategory.toUpperCase()} „Äõ üå∏\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
        txt += group.commandsName
            .map((cmd, i) => `‚ú® ${i + 1}. ${cmd.charAt(0).toUpperCase() + cmd.slice(1)} üíñ`)
            .join("\n");
        txt += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nT·ªïng: ${group.commandsName.length} l·ªánh\n`;
        txt += `üåü Reply s·ªë (1 ‚Üí ${group.commandsName.length}) ƒë·ªÉ xem chi ti·∫øt l·ªánh`;

        api.sendMessage(txt, threadID, (err, info) => {
            global.client.handleReply.push({
                type: "menu_detail",
                name: "menu",
                author: senderID,
                messageID: info.messageID,
                data: group.commandsName
            });
        });
    }
    // menu chi ti·∫øt: xem th√¥ng tin l·ªánh
    else if (handleReply.type === "menu_detail") {
        if (num < 1 || num > handleReply.data.length)
            return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", threadID);

        const cmdName = handleReply.data[num - 1];
        const cmd = global.client.commands.get(cmdName);
        if (!cmd) return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªánh!", threadID);

        const { description, usages, cooldowns, hasPermssion } = cmd.config;
        let txt = `‚ú® „Äö TH√îNG TIN L·ªÜNH „Äõ ‚ú®\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
        txt += `üíñ T√™n l·ªánh: ${cmdName.charAt(0).toUpperCase() + cmdName.slice(1)}\n`;
        txt += `üìù M√¥ t·∫£: ${description || "Ch∆∞a c√≥"}\n`;
        txt += `‚ö° C√°ch d√πng: ${usages || "Ch∆∞a c√≥"}\n`;
        txt += `‚è± Th·ªùi gian cooldown: ${cooldowns || 0}s\n`;
        txt += `üîë Quy·ªÅn h·∫°n: ${hasPermssion}\n`;
        txt += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        return api.sendMessage(txt, threadID);
    }
};

// ================== helper ===================
function filterCommands(commands, isAdmin) {
    return Array.from(commands).filter(cmd => {
        const { commandCategory, hasPermssion } = cmd.config;
        if (isAdmin) return true;
        return commandCategory !== 'H·ªá Th·ªëng' && hasPermssion < 2;
    });
}

function commandsGroup(isAdmin) {
    const array = [],
        cmds = filterCommands(global.client.commands.values(), isAdmin);
    for (const cmd of cmds) {
        const { name, commandCategory } = cmd.config;
        const find = array.find(i => i.commandCategory == commandCategory);
        !find
            ? array.push({ commandCategory, commandsName: [name] })
            : find.commandsName.push(name);
    };
    array.sort(sortCompare('commandsName'));
    return array;
}

function sortCompare(k) {
    return function (a, b) {
        return (a[k].length > b[k].length ? 1 : a[k].length < b[k].length ? -1 : 0) * -1;
    };
}
