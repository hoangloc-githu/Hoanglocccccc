const fs = require('fs');
const path = require('path');
const moment = require('moment-timezone');
const schedule = require('node-schedule');

const dataDir = path.join(__dirname, 'data');
const dataFilePath = path.join(dataDir, 'nhacnho.json');

let scheduledJobs = {};

if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir);
}

function loadData() {
    if (fs.existsSync(dataFilePath)) {
        try {
            return JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));
        } catch (e) {
            return {};
        }
    } else {
        return {};
    }
}

function saveData(data) {
    fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 4));
}

module.exports.config = {
    name: "nhacnho",
    version: "1.2.0",
    hasPermssion: 3,
    credits: "TatsuYTB",
    description: "T·∫°o nh·∫Øc nh·ªü theo ng√†y + gi·ªù k√®m l√Ω do, c√≥ th·ªÉ cancel",
    commandCategory: "H·ªá Th·ªëng",
    usages: "<s·ªë ng√†y> <gi·ªù:ph√∫t> <l√Ω do> [uid] | cancel",
    cooldowns: 5
};

module.exports.run = async function({ api, event, args }) {
    const userId = event.senderID;
    let data = loadData();

    // CANCEL (h·ªßy nh·∫Øc nh·ªü c·ªßa ng∆∞·ªùi d√πng)
    if (args[0] && args[0].toLowerCase() === "cancel") {
        if (scheduledJobs[userId]) {
            scheduledJobs[userId].cancel();
            delete scheduledJobs[userId];
        }
        if (data[userId]) {
            delete data[userId];
            saveData(data);
        }
        return api.sendMessage("‚èπÔ∏è ƒê√£ h·ªßy t·∫•t c·∫£ nh·∫Øc nh·ªü c·ªßa b·∫°n.", event.threadID, event.messageID);
    }

    // Ki·ªÉm tra ƒë·ªß tham s·ªë t·ªëi thi·ªÉu: s·ªë ng√†y & gi·ªù
    if (args.length < 3) {
        return api.sendMessage(
            'Vui l√≤ng nh·∫≠p ƒë·ªß tham s·ªë: <s·ªë ng√†y> <gi·ªù:ph√∫t> <l√Ω do> [uid]\n' +
            'V√≠ d·ª•: nhacnho 7 07:30 H·ªçc b√†i nh√≥m 123456789',
            event.threadID, event.messageID
        );
    }

    const numDays = parseInt(args[0]);
    const time = args[1];

    // N·∫øu th·ªèa ƒëi·ªÅu ki·ªán: n·∫øu arg cu·ªëi c√πng l√† UID (ch·ªâ s·ªë) => l·∫•y l√†m targetUid
    let targetUid = event.threadID;
    let reason = "";

    const possibleLast = args[args.length - 1];
    const isUid = /^\d+$/.test(possibleLast); // simple numeric uid detection
    if (isUid && args.length >= 4) {
        targetUid = possibleLast;
        reason = args.slice(2, args.length - 1).join(' ').trim();
    } else {
        reason = args.slice(2).join(' ').trim();
    }

    if (isNaN(numDays) || !/^\d{1,2}:\d{2}$/.test(time) || reason.length === 0) {
        return api.sendMessage('Tham s·ªë kh√¥ng h·ª£p l·ªá. ƒê·∫£m b·∫£o: s·ªë ng√†y l√† s·ªë, gi·ªù ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM, v√† c√≥ l√Ω do (reason).', event.threadID, event.messageID);
    }

    const startDate = moment().format('YYYY-MM-DD');
    const notifyTime = time;

    // L∆∞u nh·∫Øc nh·ªü (m·ªói user ch·ªâ c√≥ 1 nh·∫Øc nh·ªü). N·∫øu mu·ªën nhi·ªÅu nh·∫Øc nh·ªü/uid kh√°c nhau, c√≥ th·ªÉ m·ªü r·ªông sau.
    data[userId] = { startDate, numDays, notifyTime, targetUid, reason };
    saveData(data);

    api.sendMessage(
        `‚úÖ ƒê√£ thi·∫øt l·∫≠p nh·∫Øc nh·ªü.\n` +
        `‚è∞ Th·ªùi gian: m·ªói ng√†y l√∫c ${notifyTime} trong ${numDays} ng√†y\n` +
        `üìù L√Ω do: ${reason}\n` +
        `üì© N∆°i g·ª≠i: ${targetUid === event.threadID ? "Nh√≥m hi·ªán t·∫°i" : `UID ${targetUid}`}`,
        event.threadID, event.messageID
    );

    scheduleNotification(api, userId, data[userId]);
};

function scheduleNotification(api, userId, userData) {
    let { startDate, numDays, notifyTime, targetUid, reason } = userData;

    // H·ªßy job c≈© n·∫øu t·ªìn t·∫°i
    if (scheduledJobs[userId]) {
        try { scheduledJobs[userId].cancel(); } catch(e){}
    }

    let [hour, minute] = notifyTime.split(':');

    const job = schedule.scheduleJob({ hour: parseInt(hour), minute: parseInt(minute) }, function() {
        let today = moment().format('YYYY-MM-DD');
        let daysPassed = moment(today).diff(moment(startDate), 'days') + 1;

        if (daysPassed <= numDays) {
            // G·ª≠i tin nh·∫Øn nh·∫Øc nh·ªü, k√®m l√Ω do
            const text = `üîî Nh·∫Øc nh·ªü (${daysPassed}/${numDays})\nL√Ω do: ${reason}\nNg√†y: ${today}\nTh·ªùi gian: ${notifyTime}`;
            // N·∫øu targetUid l√† m·ªôt thread id (kh√¥ng ph·∫£i user id) n√≥ v·∫´n s·∫Ω g·ª≠i v√†o n∆°i ch·ªâ ƒë·ªãnh.
            api.sendMessage(text, targetUid).catch(() => {});
        } else {
            // H·∫øt h·∫°n nh·∫Øc nh·ªü -> x√≥a data v√† job
            let all = loadData();
            delete all[userId];
            saveData(all);
            try { job.cancel(); } catch(e){}
            delete scheduledJobs[userId];
        }
    });

    scheduledJobs[userId] = job;
}

// Khi bot kh·ªüi ƒë·ªông l·∫°i, schedule l·∫°i t·∫•t c·∫£ nh·∫Øc nh·ªü ƒë√£ l∆∞u
module.exports.handleEvent = async function({ api }) {
    let data = loadData();
    for (let userId in data) {
        if (!scheduledJobs[userId]) {
            scheduleNotification(api, userId, data[userId]);
        }
    }
};

// Gi·ªØ l·∫°i helper n·∫øu c·∫ßn
module.exports.convertHMS = function(value) {
    const sec = parseInt(value, 10);
    let hours = Math.floor(sec / 3600);
    let minutes = Math.floor((sec - (hours * 3600)) / 60);
    let seconds = sec - (hours * 3600) - (minutes * 60);
    if (hours < 10) { hours = "0" + hours; }
    if (minutes < 10) { minutes = "0" + minutes; }
    if (seconds < 10) { seconds = "0" + seconds; }
    return (hours != '00' ? hours + ':' : '') + minutes + ':' + seconds;
};
