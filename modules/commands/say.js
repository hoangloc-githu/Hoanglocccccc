const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
	name: "say",
	version: "2.0.0",
	hasPermssion: 0,
	credits: "Khum bietcode><",
	description: "Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i (Viettel + Google TTS)",
	usePrefix: false,
	commandCategory: "C√¥ng c·ª•",
	usages: "say [n·ªôi dung]",
	cooldowns: 5
};

const TOKEN = "3d86869b2984d82f6bfe36f7fe99ba25"; // Token ViettelAI

module.exports.run = async function ({ api, event, args }) {
	try {
		if (!args[0]) return api.sendMessage("‚ö†Ô∏è D√πng: say + n·ªôi dung", event.threadID);

		const msg = args.join(" ");

		// menu gi·ªçng
		const menu = `
üé§ Ch·ªçn gi·ªçng ƒë·ªçc:

1. Qu·ª≥nh Anh (N·ªØ mi·ªÅn B·∫Øc)
2. Di·ªÖm My (N·ªØ mi·ªÅn Nam)
3. Mai Ng·ªçc (N·ªØ mi·ªÅn Trung)
4. Ph∆∞∆°ng Trang (N·ªØ mi·ªÅn B·∫Øc)
5. Th·∫£o Chi (N·ªØ mi·ªÅn B·∫Øc)
6. Thanh H√† (N·ªØ mi·ªÅn B·∫Øc)
7. Ph∆∞∆°ng Ly (N·ªØ mi·ªÅn Nam)
8. Th√πy Dung (N·ªØ mi·ªÅn Nam)
9. Thanh T√πng (Nam mi·ªÅn B·∫Øc)
10. B·∫£o Qu·ªëc (Nam mi·ªÅn Trung)
11. Minh Qu√¢n (Nam mi·ªÅn Nam)
12. Thanh Ph∆∞∆°ng (N·ªØ mi·ªÅn B·∫Øc)
13. Nam Kh√°nh (Nam mi·ªÅn B·∫Øc)
14. L√™ Y·∫øn (N·ªØ mi·ªÅn Nam)
15. Ti·∫øn Qu√¢n (Nam mi·ªÅn B·∫Øc)
16. Th√πy Duy√™n (N·ªØ mi·ªÅn Nam)
17. Google TTS

üëâ Reply s·ªë ƒë·ªÉ ch·ªçn.`;

		api.sendMessage(menu, event.threadID, (err, info) => {
			global.client.handleReply.push({
				name: this.config.name,
				messageID: info.messageID,
				author: event.senderID,
				type: "chooseVoice",
				text: msg
			});
		});
	} catch (e) {
		console.log(e);
		return api.sendMessage("‚ùå L·ªói!", event.threadID);
	}
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
	if (handleReply.author != event.senderID) return;

	const { createReadStream, unlinkSync, writeFileSync } = fs;
	const { resolve } = path;

	// map s·ªë ‚Üí m√£ gi·ªçng
	const voices = {
		1: "hn-quynhanh",
		2: "hcm-diemmy",
		3: "hue-maingoc",
		4: "hn-phuongtrang",
		5: "hn-thaochi",
		6: "hn-thanhha",
		7: "hcm-phuongly",
		8: "hcm-thuydung",
		9: "hn-thanhtung",
		10: "hue-baoquoc",
		11: "hcm-minhquan",
		12: "hn-thanhphuong",
		13: "hn-namkhanh",
		14: "hn-leyen",
		15: "hn-tienquan",
		16: "hcm-thuyduyen"
	};

	const choice = parseInt(event.body.trim());
	if (isNaN(choice) || choice < 1 || choice > 17)
		return api.sendMessage("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.", event.threadID);

	const msg = handleReply.text;

	try {
		if (choice === 17) {
			// GOOGLE TTS
			const languageToSay = "vi"; // m·∫∑c ƒë·ªãnh
			const pathOut = resolve(__dirname, "cache", `${event.threadID}_${event.senderID}_gg.mp3`);
			await global.utils.downloadFile(
				`https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(msg)}&tl=${languageToSay}&client=tw-ob`,
				pathOut
			);
			return api.sendMessage(
				{ body: ".", attachment: createReadStream(pathOut) },
				event.threadID,
				() => unlinkSync(pathOut),
				event.messageID
			);
		} else {
			// VIETTEL TTS
			const voice = voices[choice];
			const res = await axios.post(
				"https://viettelai.vn/tts/speech_synthesis",
				{
					text: msg,
					voice: voice,
					speed: 1,
					tts_return_option: 3,
					token: TOKEN,
					without_filter: false
				},
				{ headers: { "Content-Type": "application/json", accept: "*/*" }, responseType: "arraybuffer" }
			);

			const pathOut = resolve(__dirname, "cache", `${event.threadID}_${event.senderID}_vt.mp3`);
			writeFileSync(pathOut, Buffer.from(res.data, "binary"));

			return api.sendMessage(
				{ body: `(#${choice}):`, attachment: createReadStream(pathOut) },
				event.threadID,
				() => unlinkSync(pathOut),
				event.messageID
			);
		}
	} catch (e) {
		console.log(e);
		return api.sendMessage("‚ö†Ô∏è C√≥ l·ªói khi t·∫°o gi·ªçng ƒë·ªçc.", event.threadID, event.messageID);
	}
};
